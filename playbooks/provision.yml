---
- hosts: all
  tasks:
    - name: Collect facts.
      debug:

#- hosts: dbservers
  #become: yes
  #vars_files:
    #- vars/secret.yml
  #vars:
    #postgresql_version: 9.1
    #postgresql_encoding: 'UTF-8'
    #postgresql_ext_install_postgis: yes
  #roles:
    #- ANXS.postgresql
  #tasks:
  #- name: Ensure Postgresql-related packages are the latest.
    #apt: name={{ item }} state=latest
    #with_items:
      #- gdal-bin
      #- proj
      #- postgresql-server-dev-all
      #- postgresql-9.1-postgis

  #- name: Ensure Postgresql is configured to listen all interfaces.
    #lineinfile:
      #dest: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
      #regexp: "^listen_addresses = "
      #line: "listen_addresses = '*'"
    #notify:
      #- restart postgresql
  #- name: Ensure Postgresql is configured to allow remote Django app login.
    #lineinfile:
      #dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
      #line: "host all all {{ hostvars[item]['ansible_eth0']['ipv4']['address'] }}/32 trust"
    #with_items: "{{ groups['webservers'] }}"
    #notify:
      #- restart postgresql

#- hosts: cacheservers
  #become: yes
  #vars_files:
    #- vars/secret.yml
  #vars:
    #memcached_listen_ip: 0.0.0.0
    #redis_bind_interface: 0.0.0.0
    #firewall_allowed_tcp_ports:
      #- "22"
    #firewall_allowed_udp_ports: []
  #roles:
    #- geerlingguy.firewall
    #- geerlingguy.memcached
    #- geerlingguy.redis
  #tasks:
    #- name: Ensure webservers has access to cacheservers.
      #lineinfile:
        #dest=/etc/firewall.bash
        #insertafter='^# Additional custom rules.'
        #line='iptables -A INPUT -s {{ hostvars[item].ansible_eth0.ipv4.address }} -j ACCEPT'
      #with_items: "{{ groups['webservers'] }}"

- hosts: webservers
  become: yes
  vars_files:
    - vars/secret.yml
    - vars/main.yml
  roles:
    - geerlingguy.apache
    - geerlingguy.varnish

- hosts: webservers
  become: yes
  vars_files:
    - vars/secret.yml
    - vars/main.yml
  tasks:
    - name: Ensure webapp group exists.
      group: name={{ localwiki_group }}

    - name: Ensure webapp user exists.
      user: name={{ localwiki_user }} group={{ localwiki_group }}

    - name: Ensure webapp directory exists.
      file: dest={{ localwiki_webapp_dir }} owner={{ localwiki_user }} group={{ localwiki_group }} state=directory

    - name: Ensure Ubuntu APT key exists
      apt_key: keyserver=keyserver.ubuntu.com id=
      with_items:
        - 2EA8F35793D8809A
        - 314DF160

    - name: Ensure APT libraries exist.
      apt: name={{ item }}
      with_items:
        - python-apt

    - name: Ensure APT repository exists
      apt_repository: repo={{ item }}
      with_items:
        - ppa:webops/solr-3.5
        - ppa:ubuntugis/ubuntugis-unstable

    - name: Ensure OS package dependencies are the latest.
      apt: name={{ item }}
      with_items:
        - python-virtualenv
        - python-dev
        - python-setuptools
        - python-psycopg2
        - python-lxml
        - python-imaging
        - python-pip
        - python-software-properties
        - git
        #- unattended-upgrades
